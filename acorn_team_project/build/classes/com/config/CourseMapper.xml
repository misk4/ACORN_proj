<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CourseMapper">

 <!-- 강의 목록 조회 
 <select id = "courseList" resultType = "CourseDTO">
 select * from course
 </select>
 
 -->
 
  <!-- 강의 목록 조회 2  -->
<select id = "courseList" resultType = "CourseDTO" >
select course.id, course.name,teacher.name as "teacher_name", start_time,end_time,start_day,end_day,days,manager_id,
current_student,max_student,total_days
from course left outer join 
(select course_id,count(*) as current_student
from register
group by course_id)cs
on(cs.course_id = course.id),teacher
where course.teacher_id = teacher.id
</select>
 
 <!--학생 강의 목록 조회  -->
<select id = "myCourseList" resultType = "CourseDTO" parameterType="string">
select course.id, course.name,teacher.name as "teacher_name", start_time,end_time,start_day,end_day,days,manager_id
,max_student,total_days,teacher.phone_num "teacher_phone",teacher.email "teacher_email",manager.phone_num "manager_phone",manager.email "manager_email"
from course left outer join 
(select course_id
from register
where register.student_id = #{id})cs
on(cs.course_id = course.id),teacher,manager
where course.teacher_id = teacher.id and course.manager_id = manager.id

</select>

 <!--강의 수강 확인  -->
<select id = "applyCheck" resultType = "int" parameterType="hashmap">
select count(*) from register where student_id = #{student_id} and course_id = #{course_id}
</select>

 <!--강의 인원 확인  -->
<select id = "applyCheck2" resultType = "int" parameterType="hashmap">
select count(register.id) as "c"
from register,course 
where register.course_id = #{course_id} and course.id = register.course_id 
group by register.course_id
having count(register.course_id) &gt;= avg(course.max_student)
</select>
 
 
 <!-- 수강 신청 -->
 <insert id = "applyCourse" parameterType = "hashmap">
 insert into register(id,student_id,course_id) values(register_seq.nextval,#{student_id},#{course_id})
 </insert>
 
 
 <!-- 강의 등록 -->
 <insert id = "registerCourse" parameterType = "CourseDTO">
 insert into course(id,name,teacher_id,start_time,end_time,start_day,end_day,days,manager_id,max_student,total_days) values(course_seq.nextval,#{name},#{teacher_id},#{start_time},#{end_time},#{start_day},#{end_day},#{days},#{manager_id},#{max_student},#{total_days})
 </insert>
 
 
 <!-- 강의 수정 -->  
 <update id = "updateCourse" parameterType = "CourseDTO">
 update course set id = #{id},name = #{name}, teacher_id = #{teacher_id},start_time = #{start_time},end_time = #{end_time},start_day = #{start_day},end_day = #{end_day},days = #{days},manager_id = #{manager_id}, max_student = #{max_student}, total_days = #{total_days}
 </update>
 
 
 <!-- 강의삭제 -->
 <delete id = "deleteCourse" parameterType = "int">
 delete from course where id = #{id}
 </delete>
 
 
 <!-- 수강 인원 체크 -->  
 <select id = "checkCourse" parameterType = "int" resultType = "int">
 select count(*) from register where course_id = #{course_id}
 </select>
 
 <!-- 강의 id 로 강의 가져오기 -->
 <select id = "getCourseById" parameterType = "int" resultType = "CourseDTO">
 select * from course where id = #{id}
 </select>
 
 <select id = "myCourse" parameterType = "string" resultType = "int">
 select course_id from register where student_id = #{id}
 </select>
 
</mapper>